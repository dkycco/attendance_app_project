<div class="row">
   <div class="col-12">
      <div class="page-title-box d-sm-flex align-items-center justify-content-between">
         <h4 class="mb-sm-0">API Key</h4>

         <div class="page-title-right">
            <ol class="breadcrumb m-0">
               <li class="breadcrumb-item active">Pengaturan</li>
               <li class="breadcrumb-item active">API Key</li>
            </ol>
         </div>

      </div>
   </div>
</div>

<div class="row">
   <div class="col-md-6-lg-12">
      <div class="card">
         <div class="card-header">
            <h5 class="card-title mb-0">Data Siswa</h5>
         </div>
         <div class="card-body">
            <div class="row g-4 mb-3">
               <div class="col-md-6">
                  <div>
                     <button type="button" class="btn btn-success" id="btnTambahAPIKey">
                        <i class="ri-add-line align-bottom me-1"></i> Tambah API Key
                     </button>
                  </div>
               </div>
               <table id="tableAPIKey" class="table nowrap align-middle" style="width:100%">
                  <thead>
                     <tr>
                        <th>ID</th>
                        <th>API Key</th>
                        <th>Dibuat Oleh</th>
                        <th>Tanggal Dibuat</th>
                        <th>Keterangan</th>
                        <th>Status</th>
                        <th>Aksi</th>
                     </tr>
                  </thead>
                  <tbody>
                     <% dataAPIKey.forEach(data => { %>
                     <tr>
                        <td><%= data.id %></td>
                        <td><%= data.api_key %></td>
                        <td><%= data.users?.nama_lengkap %></td>
                        <td>
                           <%= new Date(data.created_at).toLocaleDateString('id-ID', {
                              day: 'numeric',
                              month: 'long',
                              year: 'numeric'
                           }) %>
                        </td>
                        <td><%= truncateText(data.keterangan, 30) %></td>
                        <td>
                           <% 
                           const badgeColors = {
                              active: 'bg-success',
                              disable: 'bg-danger'
                           };
                           const color = badgeColors[data.status];
                           %>
                           <%- color ? `<span class="badge ${color}">${data.status.charAt(0).toUpperCase() + data.status.slice(1)}</span>` : '' %>
                        </td>
                        <td>
                           <button type="button"
                              class="btn btn-sm btn-warning btn-icon waves-effect waves-light btn-edit"
                              data-id="<%= data.id %>">
                              <i class="ri-pencil-fill"></i>
                           </button>
                           <button type="button"
                              class="btn btn-sm btn-danger btn-icon waves-effect waves-light btn-remove"
                              data-id="<%= data.id %>">
                              <i class="ri-delete-bin-5-line"></i>
                           </button>
                        </td>
                     </tr>
                     <% }); %>
                  </tbody>
               </table>
            </div>
         </div>
      </div>
   </div>
</div>

<script>
   const socket = io();

   function truncateText(text, maxLength) {
      if (text.length > maxLength) {
         return text.substring(0, maxLength) + '...';
      }
      return text;
   } 

   function APIKeyRow(data) {
      const row = document.createElement('tr');
      const tanggal = new Date(data.created_at).toLocaleDateString('id-ID', {
         day: 'numeric',
         month: 'long',
         year: 'numeric'
      });
      const badgeColors = {
         active: 'bg-success',
         disable: 'bg-danger'
      };
      const color = badgeColors[data.status];

      row.innerHTML = `
         <td>${data.id}</td>
         <td>${data.api_key}</td>
         <td>${data.users?.nama_lengkap}</td>
         <td>${tanggal}</td>
         <td>${truncateText(data.keterangan, 30)}</td>
         <td>${color ? `<span class="badge ${color}">${data.status.charAt(0).toUpperCase() + data.status.slice(1)}</span>` : ''}</td>
         <td>
            <button type="button" class="btn btn-sm btn-warning btn-icon waves-effect waves-light btn-edit" data-id="${data.id}">
               <i class="ri-pencil-fill"></i>
            </button>
            <button type="button" class="btn btn-sm btn-danger btn-icon waves-effect waves-light btn-remove" data-id="${data.id}">
               <i class="ri-delete-bin-5-line"></i>
            </button>
         </td>
      `;
      return row;
   }

   function handleFormSubmit(url) {
      const form = document.getElementById('formAPIKey');

      form.addEventListener('submit', async function onSubmit(e) {
         e.preventDefault();

         const formData = new FormData(this);
         const data = Object.fromEntries(formData.entries());

         try {
            const res = await fetch(url, {
               method: 'POST',
               headers: {
                  'Content-Type': 'application/json',
                  'x-socket-id': socket.id
               },
               body: JSON.stringify(data)
            });

            document.activeElement?.blur();

            const result = await res.json();
            if (!res.ok) {
               showToastify(result.message, result.type);
               return;
            }

            const modal = bootstrap.Modal.getInstance(document.getElementById('modalAPIKey'));
            modal.hide();
            form.reset();
         } catch (err) {
            console.error('Gagal menyimpan API key:', err);
         }
      });
   }

   socket.on('push:toast', payload => {
      const message = payload.message;
      const type = payload.type;
      showToastify(message, type);
   });

   socket.on('api-key:baru', (dataList) => {
      const list = Array.isArray(dataList) ? dataList : [dataList];
      const tbody = document.querySelector('#tableAPIKey tbody');
      const fragment = document.createDocumentFragment();

      for (const data of list) {
         const existing = tbody.querySelector(`.btn-remove[data-id="${data.id}"]`);
         if (existing) continue;

         const row = APIKeyRow(data);
         fragment.appendChild(row);
      }

      tbody.prepend(fragment);
   });

   socket.on('api-key:ubah', function (data) {
      const row = document.querySelector(`#tableAPIKey tbody tr td button[data-id="${data.id}"]`)?.closest('tr');
      if (!row) return;

      const badgeColors = {
         active: 'bg-success',
         disable: 'bg-danger'
      };
      const color = badgeColors[data.status];
      
      row.cells[4].textContent = truncateText(data.keterangan, 30);
      row.cells[5].innerHTML = color
      ? `<span class="badge ${color}">${data.status.charAt(0).toUpperCase() + data.status.slice(1)}</span>`
      : '';

   });

   socket.on('api-key:broadcast-hapus', async function (data) {
      const button = document.querySelector(`.btn-remove[data-id="${data.id}"]`);

      if (button) {
         const row = button.closest('tr');
         if (row) row.remove();
      }
   });

   document.addEventListener('DOMContentLoaded', () => {
      const idTable = 'tableAPIKey';
      const btnAdd = document.getElementById('btnTambahAPIKey');
      const table = document.getElementById(idTable);
      const tableAPIKey = new DataTable('#' + idTable, {
         scrollX: true,
         order: [0, 'desc'],
         columnDefs: [{
            orderable: false,
            targets: 6
         }],
      })

      btnAdd.addEventListener('click', async () => {
         const response = await fetch('/api-key/create');
         const html = await response.text();
         document.getElementById('modalContainer').innerHTML = html;

         $('.select2').select2({
            dropdownParent: $('#modalAPIKey')
         });

         const modal = new bootstrap.Modal(document.getElementById('modalAPIKey'));
         modal.show();

         handleFormSubmit('/api-key');
      });

      table.addEventListener('click', async (e) => {
         const btn = e.target.closest('.btn-edit');
         if (btn) {
            const id = btn.getAttribute('data-id');
            const response = await fetch('/api-key/edit/' + id);
            const html = await response.text();
            document.getElementById('modalContainer').innerHTML = html;

            $('.select2').select2({
               dropdownParent: $('#modalAPIKey')
            });

            const modal = new bootstrap.Modal(document.getElementById('modalAPIKey'));
            modal.show();

            handleFormSubmit('/api-key/update/' + id);
         }
      });

      table.addEventListener('click', async (e) => {
         if (e.target.closest('.btn-remove')) {
            const btn = e.target.closest('.btn-remove');
            const id = btn.getAttribute('data-id');

            const confirmAlert = confirm('Yakin hapus data ini?');
            if (!confirmAlert) return;

            try {
               const res = await fetch(`/api-key/${id}`, {
                  method: 'DELETE',
                  headers: {
                     'Content-Type': 'application/json',
                     'x-socket-id': socket.id
                  }
               });

               if (res.ok) {
                  btn.closest('tr').remove();
               }
            } catch (error) {
               console.log(error);
            }
         }
      });

   });
</script>